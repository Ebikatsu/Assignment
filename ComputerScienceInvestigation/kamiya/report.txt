・関数型プログラミングとMapReduce
オブジェクト指向は書き方。言語自体がオブジェクト指向でも書き方によってはオブジェクト指向ではなくなってしまう。逆に言語自体がオブジェクト指向でなくても書き方によってはオブジェクト指向になる。(例：Linuxのデバイスドライバ)
手続き型プログラミングの特徴として、順列、反復、分岐、関数やサブルーチンなどの服手続きがある。それに対してオブジェクト指向プログラミングの特徴はオブジェクトと、オブジェクト間のメッセージ交換である。
論理型プログラミングというものがある。例としてprologがある。
関数型プログラミングの特徴として、
・関数が定義できる
・関数で入力に対して出力を得ることができる。
・関数を組み合わせることができる。（関数合成、高階関数）
　高階関数とは、関数を引数にしたり、関数を戻り値にしたりする関数のことである。

・最適化
最適化の主な手段として、
・実行順序に依存しない処理の並列化
・サーバからのレスポンスが返ってくるまでの時間に先にできる処理をする
というものがある。

wicked problem
実際に取り掛かるまでその存在に気付かれない問題

・ソフトウェア開発の自動化
低級言語から高級言語ができたように、ソフトウェア開発の自動化は実際に進んでいる。しかし自動化されても、その自動化システムの仕様を理解し、適切に指示を与えないをいけないという手間が生じてしまう。


質問・感想・コメント
ソフトウェア開発の自動化については、さまざまな言語が開発されて自動化が進んでいて、しかし完全な自動化までにはなかなか至れていません。その原因として、自動化されたシステムにも結局的鉄に指示を与えないといけないという原因もあると思いますが、私はソフトウェア開発が自動化され、ソフトウェア開発が持つ可能性が広がることによって、人々がソフトウェアに要求するレベルも高くなるという原因もあると思いました。
